{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./node_modules/normalize.css/normalize.css","webpack:///./src/assets/css/style.scss","webpack:///./src/phototagUI.js","webpack:///./src/phototag.js","webpack:///./src/phototagAPIUtils.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;AClFA;AAAA;AAAA;AAAA;AACA,mBAAO,CAAC,CAAe;;AAEvB;AACA;AACiC;AACjC;;AAEA,mBAAmB,mBAAO,CAAC,CAAc;;AAEzC;;;;;;;;ACVA,yC;;;;;;ACAA,yC;;;;;;ACAA,iBAAiB,mBAAO,CAAC,CAAY;AACrC,oBAAoB,mBAAO,CAAC,CAAoB;;AAEhD;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,OAAO,oBAAoB,MAAM,GAAG;AACpC;AACA;AACA;AACA,GAAG;;AAEH;AACA,wBAAwB,WAAW,MAAM;AACzC;AACA,oBAAoB,UAAU,SAAS,sBAAsB,KAAK,GAAG;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,wBAAwB,WAAW,MAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA,YAAY;AACZ,GAAG;;AAEH;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA,mBAAmB,mBAAmB;;AAEtC;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,gCAAgC,KAAK;AACrC;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA,mBAAmB,8BAA8B;AACjD;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,+BAA+B,yBAAyB,GAAG,eAAe;AAC1E,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,aAAa,yBAAyB;AACtC;AACA;AACA;;AAEA;AACA,cAAc,EAAE;AAChB,cAAc,EAAE;AAChB,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;;;;;;AC1lBA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA,aAAa,OAAO;;AAEpB;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA,cAAc;AACd,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,KAAK;AACL;AACA,6BAA6B;AAC7B,KAAK;AACL;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;;AAEA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,qBAAqB,wBAAwB;AAC7C;AACA;;AAEA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uBAAuB;AACjE,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uBAAuB;AACjE;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,oBAAoB,gCAAgC;AACpD;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;;;;;;;ACzRA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA,iBAAiB,8BAA8B,EAAE,KAAK;;AAEtD;AACA,iBAAiB,IAAI,GAAG,eAAe;AACvC;;AAEA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,gBAAgB,mCAAmC,iBAAiB;AACpE;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// eslint-disable-next-line import/no-extraneous-dependencies\nrequire('normalize.css');\n\n// normalize.css must be loaded first before app css, so disable eslint check\n/* eslint-disable import/first */\nimport './assets/css/style.scss';\n/* eslint-enable import/first */\n\nconst phototagUI = require('./phototagUI');\n\nphototagUI.initPhototag();\n\n","// removed by extract-text-webpack-plugin","// removed by extract-text-webpack-plugin","const phototag = require('./phototag');\nconst phototagAPI = require('./phototagAPIUtils');\n\nconst phototagAPIInterface = {\n  getChallenges(displayCallback, errorCallback) {\n    phototagAPI.makeAPIGetRequest(\n      phototagAPI.apiPaths.challengePath,\n      {},\n      displayCallback,\n      errorCallback\n    );\n  },\n\n  getPhotoInfo(image, displayCallback, errorCallback) {\n    phototagAPI.makeAPIGetRequest(\n      phototagAPI.apiPaths.photoPath,\n      { image_filename: `${image}` },\n      displayCallback,\n      errorCallback\n    );\n  },\n\n  updateLeaderboard(appid, initials, time, displayCallback, errorCallback) {\n    const paramsHash = { appid: `${appid}` };\n    const payload = {\n      leaderboard: { name: `${initials}`, challenge_time: `${time}` },\n    };\n    phototagAPI.makeAPIPostRequest(\n      phototagAPI.apiPaths.leaderBoardPath,\n      paramsHash,\n      payload,\n      displayCallback,\n      errorCallback\n    );\n  },\n\n  getLeaders(appid, displayCallback, errorCallback) {\n    const paramsHash = { appid: `${appid}` };\n    phototagAPI.makeAPIGetRequest(\n      phototagAPI.apiPaths.leaderBoardPath,\n      paramsHash,\n      displayCallback,\n      errorCallback\n    );\n  },\n};\n\nconst phototagUI = {\n  interfaces: {\n    picBoard: null,\n    challengeController: null,\n  },\n\n  resetInterfaces() {\n    phototagUI.interfaces.picBoard = null;\n    phototagUI.interfaces.challengeController = null;\n  },\n\n  identifiers: {\n    appTitleID: 'title',\n    challengePageID: 'challenge-page',\n    closeModalID: 'close-modal',\n    displayBoardID: 'display-board',\n    fetchingID: 'fetching',\n    itemListID: 'item-list',\n    mainBoardID: 'main-board',\n    menuPageID: 'menu-page',\n    noticeID: 'status',\n    photoID: 'challenge-photo',\n    picboardID: 'pic-board',\n    popupWrapperID: 'popup-wrapper',\n    sideboardID: 'side-board',\n    submitPopupID: 'submit-popup',\n    submitTimeID: 'submit-time',\n    timerID: 'timer',\n    timeFormID: 'time-form',\n    topTenID: 'topten',\n    toptenPopupID: 'topten-popup',\n  },\n\n  appName() {\n    return 'Identicize';\n  },\n\n  getRootElement() {\n    return document.getElementById('root');\n  },\n\n  getXYTopLeftPic() {\n    return { top_left_x: 250, top_left_y: 32 };\n  },\n\n  getTextTime(elapsedTimeSecs) {\n    let textTime = '';\n    const minutes = Math.floor(elapsedTimeSecs / 60);\n    if (minutes > 0) {\n      textTime += `${minutes}m `;\n    }\n    const seconds = elapsedTimeSecs % 60;\n    textTime += `${seconds.toFixed(1)}s`;\n\n    return textTime;\n  },\n\n  getTimeInSeconds(elapsedTime) {\n    return parseFloat((elapsedTime / 1000).toFixed(1));\n  },\n\n  filterInitials(initials) {\n    const stops = ['ASS', 'TIT', 'FUK'];\n    let filtered = '';\n\n    if (stops.includes(initials)) {\n      filtered = initials.slice(0, 2);\n    } else {\n      filtered = initials;\n    }\n\n    return filtered;\n  },\n\n  createWrapperElement(id) {\n    const div = document.createElement('div');\n    div.id = id;\n    return div;\n  },\n\n  createTitleBanner() {\n    const title = phototagUI.createWrapperElement(\n      phototagUI.identifiers.appTitleID\n    );\n    title.textContent = phototagUI.appName();\n    return title;\n  },\n\n  createFetchingNotice(item) {\n    const p = document.createElement('p');\n    p.id = phototagUI.identifiers.fetchingID;\n    p.textContent = `Fetching ${item} .....`;\n    return p;\n  },\n\n  createPopupWrapper() {\n    const container = phototagUI.createWrapperElement(\n      phototagUI.identifiers.popupWrapperID\n    );\n    container.classList.add('block');\n    return container;\n  },\n\n  createPopup(id) {\n    const popup = phototagUI.createWrapperElement(id);\n    return popup;\n  },\n\n  createCloseModal() {\n    const button = document.createElement('button');\n    button.id = phototagUI.identifiers.closeModalID;\n    button.classList.add('btn');\n    button.textContent = 'Close';\n    button.addEventListener('click', phototagUI.listeners.handleCloseModal);\n\n    return button;\n  },\n\n  createSubmitTimeButton() {\n    const button = document.createElement('button');\n    button.setAttribute('type', 'submit');\n    button.classList.add('btn');\n    button.textContent = 'Submit Time';\n    button.addEventListener('click', phototagUI.listeners.handleSubmitTime);\n\n    return button;\n  },\n\n  removeElement(id) {\n    const elem = document.getElementById(id);\n    const parentElem = elem.parentNode;\n    parentElem.removeChild(elem);\n  },\n\n  createPicboard(photo) {\n    const picboard = phototag.createPictureBoard();\n\n    for (let i = 0; i < photo[0]['items'].length; i += 1) {\n      picboard.addItem(phototag.createItem(photo[0]['items'][i]));\n    }\n\n    return picboard;\n  },\n\n  initInterfaces(photo) {\n    phototagUI.interfaces.picBoard = phototagUI.createPicboard(photo);\n    phototagUI.interfaces.challengeController.addPicboard(\n      phototagUI.interfaces.picBoard\n    );\n  },\n\n  linkPhoto(image_filename) {\n    const img = document.getElementById(phototagUI.identifiers.photoID);\n    img.setAttribute('src', `${phototagAPI.getHostUrl()}/${image_filename}`);\n  },\n\n  updatePicboard(image_filename) {\n    phototagUI.removeElement(phototagUI.identifiers.fetchingID);\n    phototagUI.linkPhoto(image_filename);\n  },\n\n  updateTimer() {\n    const timer = document.getElementById(phototagUI.identifiers.timerID);\n    timer.textContent = phototagUI.interfaces.challengeController.getTextCurrElapsedTime();\n    if (!phototagUI.interfaces.challengeController.gameOver()) {\n      requestAnimationFrame(phototagUI.updateTimer);\n    } else {\n      phototagUI.updateNotice();\n    }\n  },\n\n  updateNotice(content = null) {\n    const notice = document.getElementById(phototagUI.identifiers.noticeID);\n    if (content === null) {\n      notice.textContent = phototagUI.interfaces.challengeController.getStatus();\n    } else {\n      notice.textContent = content;\n    }\n  },\n\n  updateItemList() {\n    const itemsClicked = phototagUI.interfaces.picBoard\n      .getItemsClicked()\n      .split(',');\n\n    const ul = document.getElementById(phototagUI.identifiers.itemListID);\n\n    while (ul.firstChild) {\n      ul.removeChild(ul.firstChild);\n    }\n\n    const items = phototagUI.interfaces.picBoard.getItemList();\n\n    for (let i = 0; i < items.length; i += 1) {\n      const li = document.createElement('li');\n      li.textContent = items[i];\n      if (itemsClicked.includes(items[i])) {\n        li.classList.add('strike');\n      }\n      ul.appendChild(li);\n    }\n  },\n\n  handlePhotoResponse(photo) {\n    phototagUI.initInterfaces(photo);\n    phototagUI.updatePicboard(photo[0]['image_filename']);\n    requestAnimationFrame(phototagUI.updateTimer);\n    phototagUI.interfaces.challengeController.start();\n    phototagUI.updateNotice();\n    phototagUI.updateItemList();\n  },\n\n  buildSubmitTimeForm() {\n    const displayContainer = phototagUI.createPopupWrapper();\n    const popupContainer = phototagUI.createPopup(\n      phototagUI.identifiers.submitPopupID\n    );\n\n    const form = document.createElement('form');\n    form.id = phototagUI.identifiers.submitTimeID;\n    form.setAttribute('action', '#');\n\n    const label = document.createElement('label');\n    label.setAttribute('for', 'initials');\n    label.textContent = 'Initials:';\n\n    const input = document.createElement('input');\n    input.setAttribute('type', 'text');\n    input.setAttribute('name', 'initials');\n    input.setAttribute('required', 'required');\n    input.setAttribute('autofocus', 'autofocus');\n    input.setAttribute('maxlength', '3');\n\n    form.appendChild(label);\n    form.appendChild(input);\n    form.appendChild(phototagUI.createSubmitTimeButton());\n    form.appendChild(phototagUI.createCloseModal());\n\n    popupContainer.appendChild(form);\n    displayContainer.appendChild(popupContainer);\n    phototagUI.getRootElement().appendChild(displayContainer);\n  },\n\n  buildLeaderPopup(leaders) {\n    phototagUI.updateNotice('');\n    const displayContainer = phototagUI.createPopupWrapper();\n    const popupContainer = phototagUI.createPopup(\n      phototagUI.identifiers.toptenPopupID\n    );\n    const topten = phototagUI.createWrapperElement(\n      phototagUI.identifiers.topTenID\n    );\n\n    const p = document.createElement('p');\n    p.textContent = 'Top Ten for this challenge';\n\n    const ol = document.createElement('ol');\n\n    // Display top 10\n    for (let i = 0; i < 10; i += 1) {\n      const li = document.createElement('li');\n      // Lets us create empty slots\n      if (i < leaders.length) {\n        const textTime = phototagUI.getTextTime(\n          parseFloat(leaders[i]['challenge_time'])\n        );\n        li.textContent = leaders[i]['name'] + ' ' + textTime;\n      }\n      ol.appendChild(li);\n    }\n\n    topten.appendChild(p);\n    topten.appendChild(ol);\n    topten.appendChild(phototagUI.createCloseModal());\n\n    popupContainer.appendChild(topten);\n    displayContainer.appendChild(popupContainer);\n    phototagUI.getRootElement().appendChild(displayContainer);\n  },\n\n  closeModal() {\n    const rootElement = phototagUI.getRootElement();\n    const wrapper = document.getElementById(\n      phototagUI.identifiers.popupWrapperID\n    );\n\n    rootElement.removeChild(wrapper);\n  },\n\n  handleUpdateSuccess() {\n    phototagUI.updateNotice('Your score was successfully submitted');\n    const appid = JSON.parse(\n      phototagUI.interfaces.challengeController.getChallengeData()\n    ).appid;\n    phototagUI.updateNotice('Fetching top ten list...');\n    phototagAPIInterface.getLeaders(\n      appid,\n      phototagUI.buildLeaderPopup,\n      phototagUI.handleErr\n    );\n  },\n\n  handleUpdateError() {\n    phototagUI.updateNotice('There was an error submitting your score');\n  },\n\n  handleError() {\n    phototagUI.updateNotice('There was an error with the server');\n  },\n\n  listeners: {\n    loadChallenge(e) {\n      const td = e.target.parentNode;\n      const image = td.childNodes[3].textContent;\n      const challengeData = td.childNodes[4].textContent;\n      phototagUI.interfaces.challengeController = phototag.createChallengeController(\n        null,\n        challengeData\n      );\n      phototagUI.buildChallengePage();\n      phototagAPIInterface.getPhotoInfo(\n        image,\n        phototagUI.handlePhotoResponse,\n        phototagUI.handleErr\n      );\n    },\n\n    handlePicClick(e) {\n      const { top_left_x, top_left_y } = phototagUI.getXYTopLeftPic();\n      // Adjust for offset from left and top\n      const x = e.clientX - top_left_x;\n      const y = e.clientY - top_left_y;\n\n      phototagUI.interfaces.challengeController.clickPicture({\n        x: `${x}`,\n        y: `${y}`,\n      });\n\n      phototagUI.updateNotice();\n      phototagUI.updateItemList();\n\n      if (phototagUI.interfaces.challengeController.gameOver()) {\n        phototagUI.buildSubmitTimeForm();\n        e.target.removeEventListener(\n          'click',\n          phototagUI.listeners.handlePicClick\n        );\n      }\n    },\n\n    handleSubmitTime(e) {\n      const form = e.target.parentNode;\n      if (form.checkValidity()) {\n        const initials = form.querySelector('input[name=\"initials\"]');\n        const initialsVal = phototagUI.filterInitials(\n          initials.value.toUpperCase()\n        );\n        initials.textContent = initialsVal;\n        const time = phototagUI.getTimeInSeconds(\n          phototagUI.interfaces.challengeController.getElapsedTime()\n        );\n        const appid = JSON.parse(\n          phototagUI.interfaces.challengeController.getChallengeData()\n        ).appid;\n        phototagAPIInterface.updateLeaderboard(\n          appid,\n          initialsVal,\n          time,\n          phototagUI.handleUpdateSuccess,\n          phototagUI.handleUpdateError\n        );\n        phototagUI.closeModal();\n      }\n    },\n\n    handleCloseModal(e) {\n      phototagUI.closeModal();\n    },\n\n    handleGotoMenu(e) {\n      phototagUI.resetInterfaces();\n      phototagUI.removeElement(phototagUI.identifiers.challengePageID);\n      phototagUI.buildMenuPage();\n    },\n  },\n\n  createDataCell(tag, text, hidden = false) {\n    const elem = document.createElement(tag);\n    if (hidden) elem.classList.add('hidden');\n    elem.textContent = text;\n    return elem;\n  },\n\n  addHeaders(table) {\n    const colHeaders = ['Challenge', 'Best Time', 'Initials', '', ''];\n    const thead = document.createElement('thead');\n    const tr = document.createElement('tr');\n\n    for (let i = 0; i < colHeaders.length; i += 1) {\n      tr.appendChild(phototagUI.createDataCell('th', colHeaders[i]));\n    }\n    thead.appendChild(tr);\n    table.appendChild(thead);\n  },\n\n  addRows(table, challenges) {\n    const tbody = document.createElement('tbody');\n\n    for (let i = 0; i < challenges.length; i += 1) {\n      const tr = document.createElement('tr');\n      tr.appendChild(phototagUI.createDataCell('td', challenges[i]['name']));\n      tr.childNodes[0].addEventListener(\n        'click',\n        phototagUI.listeners.loadChallenge\n      );\n      if (challenges[i]['leaderboards'].length > 0) {\n        const textTime = phototagUI.getTextTime(\n          parseFloat(challenges[i]['leaderboards'][0].challenge_time)\n        );\n        tr.appendChild(phototagUI.createDataCell('td', textTime));\n        tr.appendChild(\n          phototagUI.createDataCell('td', challenges[i]['leaderboards'][0].name)\n        );\n      } else {\n        tr.appendChild(phototagUI.createDataCell('td', '---'));\n        tr.appendChild(phototagUI.createDataCell('td', '---'));\n      }\n      tr.appendChild(\n        phototagUI.createDataCell('td', challenges[i].photo_name, true)\n      );\n      delete challenges[i]['leaderboards'];\n      tr.appendChild(\n        phototagUI.createDataCell('td', JSON.stringify(challenges[i]), true)\n      );\n      tbody.appendChild(tr);\n    }\n    table.appendChild(tbody);\n  },\n\n  addChallengeMenu(challenges) {\n    phototagUI.removeElement(phototagUI.identifiers.fetchingID);\n\n    const menuPage = document.getElementById(phototagUI.identifiers.menuPageID);\n    const table = document.createElement('table');\n    phototagUI.addHeaders(table);\n    phototagUI.addRows(table, challenges);\n    menuPage.appendChild(table);\n  },\n\n  handleFetchErr(error) {\n    alert(error);\n  },\n\n  requestChallenges() {\n    phototagAPIInterface.getChallenges(\n      phototagUI.addChallengeMenu,\n      phototagUI.handleFetchErr\n    );\n  },\n\n  createSideboard(challenge) {\n    const sideboard = phototagUI.createWrapperElement(\n      phototagUI.identifiers.sideboardID\n    );\n    const infoWrapper = document.createElement('div');\n    // Challenge name\n    let p = document.createElement('p');\n    p.textContent = challenge.name;\n    infoWrapper.appendChild(p);\n    // Challenge description\n    p = document.createElement('p');\n    p.textContent = challenge.desc;\n    infoWrapper.appendChild(p);\n    // Timer\n    p = document.createElement('p');\n    p.id = phototagUI.identifiers.timerID;\n    p.textContent = '00:00:00';\n    infoWrapper.appendChild(p);\n    // Item list\n    p = document.createElement('p');\n    p.textContent = 'To be found:';\n    infoWrapper.appendChild(p);\n    const itemList = document.createElement('ul');\n    itemList.id = phototagUI.identifiers.itemListID;\n    infoWrapper.appendChild(itemList);\n    // Button area\n    const buttonWrapper = document.createElement('div');\n    const button = document.createElement('button');\n    button.classList.add('btn');\n    button.textContent = 'Challenge Menu';\n    button.addEventListener('click', phototagUI.listeners.handleGotoMenu);\n    buttonWrapper.appendChild(button);\n\n    sideboard.appendChild(infoWrapper);\n    sideboard.appendChild(buttonWrapper);\n\n    return sideboard;\n  },\n\n  createMainboard() {\n    // mainboard\n    const mainboard = phototagUI.createWrapperElement(\n      phototagUI.identifiers.mainBoardID\n    );\n    const picboard = phototagUI.createWrapperElement(\n      phototagUI.identifiers.picboardID\n    );\n    picboard.appendChild(phototagUI.createFetchingNotice('challenge photo'));\n    const img = document.createElement('img');\n    img.id = phototagUI.identifiers.photoID;\n    img.addEventListener('click', phototagUI.listeners.handlePicClick);\n    picboard.appendChild(img);\n    mainboard.appendChild(picboard);\n    mainboard.appendChild(\n      phototagUI.createWrapperElement(phototagUI.identifiers.noticeID)\n    );\n\n    return mainboard;\n  },\n\n  buildChallengePage() {\n    phototagUI.removeElement(phototagUI.identifiers.menuPageID);\n    const challenge = JSON.parse(\n      phototagUI.interfaces.challengeController.getChallengeData()\n    );\n    const rootElement = phototagUI.getRootElement();\n    const challengePage = phototagUI.createWrapperElement(\n      phototagUI.identifiers.challengePageID\n    );\n    const displayBoard = phototagUI.createWrapperElement(\n      phototagUI.identifiers.displayBoardID\n    );\n    displayBoard.appendChild(phototagUI.createSideboard(challenge));\n    displayBoard.appendChild(phototagUI.createMainboard());\n    challengePage.appendChild(displayBoard);\n    rootElement.appendChild(challengePage);\n  },\n\n  buildMenuPage() {\n    const rootElement = phototagUI.getRootElement();\n    const menuPage = phototagUI.createWrapperElement(\n      phototagUI.identifiers.menuPageID\n    );\n    rootElement.appendChild(menuPage);\n    menuPage.appendChild(phototagUI.createFetchingNotice('challenges'));\n    phototagUI.requestChallenges();\n  },\n\n  initPhototag() {\n    const rootElement = phototagUI.getRootElement();\n    rootElement.appendChild(phototagUI.createTitleBanner());\n    phototagUI.buildMenuPage();\n  },\n};\n\nmodule.exports = phototagUI;\n","const phototag = {\n  nameable: state => ({\n    getName: () => state.name,\n  }),\n\n  clickableItem: (state, helpers) => ({\n    click: coords => {\n      if (!state.clicked) {\n        state.clicked = helpers.coords_within_rect(coords, state, helpers);\n      }\n    },\n    clicked: () => state.clicked,\n    getNameOfClicked(coords) {\n      if (helpers.coords_within_rect(coords, state, helpers)) {\n        return state.name;\n      } else {\n        return '';\n      }\n    },\n  }),\n\n  itemHelpers: {\n    coords_within_rect(coords, state, helpers) {\n      const { x, y } = coords;\n\n      const leftX = helpers.getXY(state.top_left_loc).x;\n      const rightX = helpers.getXY(state.bottom_right_loc).x;\n      const bottomY = helpers.getXY(state.bottom_right_loc).y;\n      const topY = helpers.getXY(state.top_left_loc).y;\n\n      return x > leftX && x < rightX && y > topY && y < bottomY;\n    },\n\n    getXY(loc) {\n      const locArr = loc.split(',');\n\n      const x = parseInt(locArr[0], 10);\n      const y = parseInt(locArr[1], 10);\n\n      return { x: x, y: y };\n    },\n  },\n\n  createItem(item) {\n    const state = {\n      name: item.name,\n      top_left_loc: item.top_left_loc,\n      bottom_right_loc: item.bottom_right_loc,\n      clicked: false,\n    };\n\n    return Object.assign(\n      {},\n      phototag.nameable(state),\n      phototag.clickableItem(state, phototag.itemHelpers)\n    );\n  },\n\n  itemable: state => ({\n    addItem: item => {\n      state.items.push(item);\n    },\n    getItem: index => {\n      return Object.assign({}, state.items[index]);\n    },\n    getItemList: () => {\n      return state.items.map(item => item.getName());\n    },\n  }),\n\n  clickableBoard: (state, helpers) => ({\n    click: coords => {\n      let itemClicked = null;\n\n      for (let i = 0; i < state.items.length; i += 1) {\n        state.items[i].click(coords);\n        if (state.items[i].clicked()) {\n          itemClicked = state.items[i].getName();\n          helpers.updateItemsClicked(itemClicked, state);\n        }\n      }\n      helpers.updateAllItemsClicked(state);\n\n      return itemClicked;\n    },\n    getItemsClicked: () => state.itemsClicked.toString(),\n    allItemsClicked: () => state.allItemsClicked,\n    getNameOfClicked: coords => {\n      let name = '';\n      for (let i = 0; i < state.items.length; i += 1) {\n        name = state.items[i].getNameOfClicked(coords);\n        if (name.length > 0) {\n          break;\n        }\n      }\n      return name;\n    },\n  }),\n\n  boardHelpers: {\n    updateItemsClicked: (itemName, state) => {\n      if (state.itemsClicked.indexOf(itemName) === -1) {\n        state.itemsClicked.push(itemName);\n      }\n    },\n    updateAllItemsClicked: state => {\n      const clicked = [];\n\n      for (let i = 0; i < state.items.length; i += 1) {\n        clicked[i] = state.items[i].clicked();\n      }\n\n      state.allItemsClicked = !clicked.includes(false);\n    },\n  },\n\n  createPictureBoard() {\n    const state = {\n      items: [],\n      itemsClicked: [],\n      allItemsClicked: false,\n    };\n\n    return Object.assign(\n      {},\n      phototag.itemable(state),\n      phototag.clickableBoard(state, phototag.boardHelpers)\n    );\n  },\n\n  phaseable: (state, helpers) => ({\n    getStatus: () => state.gameStatus,\n    getState: () => state.phase,\n    gameOver: () => state.phase === 'over',\n    start: () => {\n      if (state.phase === 'ready') {\n        state.phase = 'playing';\n        if (state.directedArray !== null) {\n          state.gameStatus = 'Find ' + `${state.directedArray[0]}`;\n        } else {\n          state.gameStatus = 'Click on objects and/or people';\n        }\n        state.timeStart = performance.now();\n      } else {\n        throw 'Start called before controller is ready';\n      }\n    },\n    addPicboard: picboard => {\n      state.picBoard = picboard;\n      state.phase = 'ready';\n      state.gameStatus = 'ready';\n\n      const meta_data = JSON.parse(JSON.parse(state.challenge).meta_data);\n      if (meta_data.directed) {\n        helpers.createDirectedArray(state);\n      }\n    },\n    getChallengeData: () => state.challenge,\n  }),\n\n  playable: state => ({\n    clickPicture: coords => {\n      if (state.phase !== 'playing') {\n        throw 'Clicked was called when game was not being played';\n      }\n\n      // Only mark item clicked if it is what is being asked for\n      if (state.directedArray !== null) {\n        if (\n          state.picBoard.getNameOfClicked(coords) === state.directedArray[0]\n        ) {\n          state.picBoard.click(coords);\n          state.directedArray.splice(0, 1);\n          state.gameStatus = 'Find ' + `${state.directedArray[0]}`;\n        }\n      } else {\n        state.picBoard.click(coords);\n      }\n\n      if (state.picBoard.allItemsClicked()) {\n        state.elapsedTime = performance.now() - state.timeStart;\n        state.phase = 'over';\n        state.gameStatus = `You finished in ${(\n          state.elapsedTime / 1000\n        ).toFixed(1)} seconds`;\n\n        if (state.challengeTime !== null) {\n          state.timedSuccess = true;\n          clearTimeout(state.timerID);\n        }\n      }\n    },\n    getElapsedTime: () => state.elapsedTime,\n    getTextCurrElapsedTime: () => {\n      let textTime = '';\n      let timeDiff = performance.now() - state.timeStart;\n      // Fake a countdown timer\n      if (state.timerID !== null) {\n        timeDiff = state.challengeTime - timeDiff;\n      }\n      const minutes = Math.floor(timeDiff / 60000);\n      textTime += minutes.toString().padStart(2, '0');\n      const seconds = (timeDiff % 60000) / 1000;\n      textTime += ':';\n      textTime += Math.floor(seconds)\n        .toString()\n        .padStart(2, '0');\n      let hundreths = Math.round((seconds % 1) * 100);\n      textTime += ':';\n      if (state.phase === 'over' && !state.timedSuccess) {\n        hundreths = 0;\n      }\n      textTime += hundreths.toString().padStart(2, '0');\n      return textTime;\n    },\n  }),\n\n  timed: state =>\n    (state.timerID = setTimeout(function() {\n      state.phase = 'over';\n      state.timedSuccess = false;\n      state.elapsedTime = state.challengeTime;\n      state.gameStatus = 'You failed to complete the challenge on time';\n    }, state.challengeTime)),\n\n  challengeHelpers: {\n    createDirectedArray(state) {\n      // Grabbed from StackOverflow, Schwartzian transform\n      state.directedArray = state.picBoard\n        .getItemList()\n        .map(a => ({ sort: Math.random(), value: a }))\n        .sort((a, b) => a.sort - b.sort)\n        .map(a => a.value);\n    },\n  },\n\n  createChallengeController(picBoard, challenge) {\n    let controller = null;\n    const meta_data = JSON.parse(JSON.parse(challenge).meta_data);\n    const timedChallenge = meta_data.ctype === 'timed';\n\n    const state = {\n      challenge: challenge,\n      picBoard: picBoard,\n      phase: null,\n      gameStatus: null,\n      timeStart: null,\n      elapsedTime: 0,\n      challengeTime: null,\n      timerID: null,\n      timedSuccess: false,\n      directedArray: null,\n    };\n\n    state.phase = picBoard === null ? 'created' : 'ready';\n    state.gameStatus = picBoard === null ? 'Created' : 'ready';\n\n    if (picBoard !== null && meta_data.directed) {\n      phototag.challengeHelpers.createDirectedArray(state);\n    }\n\n    if (timedChallenge) {\n      state.challengeTime = meta_data.ctime;\n      controller = Object.assign(\n        {},\n        phototag.phaseable(state, phototag.challengeHelpers),\n        phototag.playable(state),\n        phototag.timed(state)\n      );\n    } else {\n      controller = Object.assign(\n        {},\n        phototag.phaseable(state, phototag.challengeHelpers),\n        phototag.playable(state)\n      );\n    }\n\n    return controller;\n  },\n};\n\nmodule.exports = phototag;\n","const phototagAPIUtils = {\n  apiPaths: {\n    photoPath: '/api/v1/photos',\n    leaderBoardPath: '/api/v1/leaderboards',\n    challengePath: '/api/v1/challenges',\n  },\n\n  getHostUrl() {\n    return 'https://tagphoto.herokuapp.com';\n  },\n\n  buildApiUrl(path, paramHash) {\n    let uri = `${phototagAPIUtils.getHostUrl()}${path}?APITOKEN=9931c7c14267f95303df6518c28d8fd6`;\n\n    for (let key in paramHash) {\n      uri += `&${key}=${paramHash[key]}`;\n    }\n\n    return uri;\n  },\n\n  async doAPIGet(path, paramHash) {\n    let response;\n\n    try {\n      response = await fetch(phototagAPIUtils.buildApiUrl(path, paramHash));\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    if (response.ok) {\n      return Promise.resolve(response.json());\n    } else {\n      return Promise.reject(response.json());\n    }\n  },\n\n  makeAPIGetRequest(path, paramsHash, handleResp, handleErr) {\n    // TODO: figure out how to use async here\n    const timeoutPromise = new Promise((resolve, reject) => {\n      const id = setTimeout(() => {\n        clearTimeout(id);\n        reject('Photo server took too long to respond.');\n      }, 20000);\n    });\n\n    const apiRequest = Promise.race([\n      phototagAPIUtils.doAPIGet(path, paramsHash),\n      timeoutPromise,\n    ]);\n\n    apiRequest.then(\n      response => {\n        handleResp(response);\n      },\n      error => {\n        handleErr(error);\n      }\n    );\n  },\n\n  buildPayload(body) {\n    const jsonBody = JSON.stringify(body);\n    return {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json; charset=utf-8' },\n      body: jsonBody,\n    };\n  },\n\n  async doAPIPost(path, paramHash, body) {\n    let response;\n\n    const payload = phototagAPIUtils.buildPayload(body);\n\n    try {\n      response = await fetch(\n        phototagAPIUtils.buildApiUrl(path, paramHash),\n        payload\n      );\n    } catch (err) {\n      return Promise.reject(err);\n    }\n\n    if (response.ok) {\n      return Promise.resolve(response);\n    } else {\n      return Promise.reject(response.json());\n    }\n  },\n\n  makeAPIPostRequest(path, paramsHash, body, handleResp, handleErr) {\n    // TODO: figure out how to use async here\n    const timeoutPromise = new Promise((resolve, reject) => {\n      const id = setTimeout(() => {\n        clearTimeout(id);\n        reject('Photo server took too long to respond.');\n      }, 20000);\n    });\n\n    const apiRequest = Promise.race([\n      phototagAPIUtils.doAPIPost(path, paramsHash, body),\n      timeoutPromise,\n    ]);\n\n    apiRequest.then(\n      response => {\n        handleResp(response);\n      },\n      error => {\n        handleErr(error);\n      }\n    );\n  },\n};\n\nmodule.exports = phototagAPIUtils;\n"],"sourceRoot":""}